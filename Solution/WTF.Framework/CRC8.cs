namespace WTF.Framework
{
    using System;

    public class CRC8 : ICRC
    {
        private byte crc = 0;
        public byte[] CRC8_Table = new byte[] { 
            0, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 
            0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 30, 0x5f, 1, 0xe3, 0xbd, 0x3e, 0x60, 130, 220, 
            0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 160, 0xe1, 0xbf, 0x5d, 3, 0x80, 0xde, 60, 0x62, 
            190, 0xe0, 2, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 
            70, 0x18, 250, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 7, 
            0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 6, 0x58, 0x19, 0x47, 0xa5, 0xfb, 120, 0x26, 0xc4, 0x9a, 
            0x65, 0x3b, 0xd9, 0x87, 4, 90, 0xb8, 230, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 
            0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 100, 0x86, 0xd8, 0x5b, 5, 0xe7, 0xb9, 
            140, 210, 0x30, 110, 0xed, 0xb3, 0x51, 15, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd, 
            0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 14, 80, 
            0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 12, 0x52, 0xb0, 0xee, 
            50, 0x6c, 0x8e, 0xd0, 0x53, 13, 0xef, 0xb1, 240, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 
            0xca, 0x94, 0x76, 40, 0xab, 0xf5, 0x17, 0x49, 8, 0x56, 180, 0xea, 0x69, 0x37, 0xd5, 0x8b, 
            0x57, 9, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 170, 0x48, 0x16, 
            0xe9, 0xb7, 0x55, 11, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 20, 0xf6, 0xa8, 
            0x74, 0x2a, 200, 150, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 10, 0x54, 0xd7, 0x89, 0x6b, 0x35
         };
        private readonly byte CrcSeed = 0xff;

        public byte ComputeCrc(byte oldCrc, byte bval)
        {
            return this.CRC8_Table[oldCrc ^ bval];
        }

        public override long GetCrc(int bval)
        {
            this.crc = this.CrcSeed;
            this.crc = this.CRC8_Table[this.crc ^ (bval & 0xff)];
            this.crc = (byte) (this.crc ^ this.CrcSeed);
            return (long) this.crc;
        }

        public override long GetCrc(byte[] buffer, int offset, int count)
        {
            if ((((buffer == null) || (buffer.Length < 1)) || ((offset < 0) || (offset >= buffer.Length))) || (count < 1))
            {
                return -1L;
            }
            this.crc = this.CrcSeed;
            for (int i = offset; i < count; i++)
            {
                this.crc = this.CRC8_Table[this.crc ^ buffer[i]];
            }
            this.crc = (byte) (this.crc ^ this.CrcSeed);
            return (long) this.crc;
        }
    }
}


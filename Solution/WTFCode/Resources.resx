<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetTables" xml:space="preserve">
    <value>SELECT
  TABLE_CATALOG,
  TABLE_SCHEMA,
  TABLE_NAME as TableName,
  TABLE_TYPE,
  ENGINE,
  VERSION,
  ROW_FORMAT,
  TABLE_ROWS,
  AVG_ROW_LENGTH,
  DATA_LENGTH,
  MAX_DATA_LENGTH,
  INDEX_LENGTH,
  DATA_FREE,
  AUTO_INCREMENT,
  CREATE_TIME,
  UPDATE_TIME,
  CHECK_TIME,
  TABLE_COLLATION,
  CHECKSUM,
  CREATE_OPTIONS,
  TABLE_COMMENT as Description 
FROM information_schema.TABLES  where TABLE_TYPE=?TableType and  TABLE_SCHEMA=?SchemaName</value>
  </data>
  <data name="EditTableHeader" xml:space="preserve">
    <value>&lt;table class="tblContent"&gt;
        &lt;colgroup&gt;
            &lt;col class="colTitle" /&gt;
            &lt;col class="colContent" /&gt;
        &lt;/colgroup&gt;
        &lt;tr class="trCaption"&gt;
            &lt;td colspan="2"&gt;
                {0}
            &lt;/td&gt;
        &lt;/tr&gt;</value>
  </data>
  <data name="GetMyGridView" xml:space="preserve">
    <value>&lt;WTF:MyGridView ID="gdvContent" runat="server" ModuleCode=""
        DataKeyNames="{0}" AutoGenerateColumns="false"  IsAutoSortFields="false"  OnRowCommand="CurrentContent_RowCommand"
        OnPagerChangeCommand="CurrentPager_PagerChangeCommand"&gt;
        &lt;Columns&gt;
        {1}
        &lt;/Columns&gt;
    &lt;/WTF:MyGridView&gt;</value>
  </data>
  <data name="GetInsertNoIdentity" xml:space="preserve">
    <value>           ExecuteNonQuery(sb.ToString(),param);
           return {0}.{1};</value>
  </data>
  <data name="GetDeleteT" xml:space="preserve">
    <value>         /// &lt;summary&gt;
        ///删除{4}
        /// &lt;/summary&gt;
        /// &lt;param name="primaryKey"&gt;主键值&lt;/param&gt;
        public void Delete{2}ByKey(string primaryKey)
        {{
            List&lt;{0}&gt; obj{1}List = primaryKey.ConvertList{5}();
            if (obj{1}List.Count &gt; 0)
            {{
                foreach ({3} obj{2} in CurrentEntities.{3}.Where(s =&gt; obj{1}List.Contains(s.{1})))
                {{
                    CurrentEntities.{3}.Remove( obj{2});
                }}
                CurrentEntities.SaveChanges();
            }}
        }}</value>
  </data>
  <data name="GetRenderPage" xml:space="preserve">
    <value>public override void RenderPage()
    {{

        this.CurrentBindData&lt;{0}&gt;(gdvContent, obj{1}.{0});
    }}</value>
  </data>
  <data name="GetItemCommand" xml:space="preserve">
    <value>protected override void CurrentTool_ItemCommand(object sender, WTF.Controls.MyCommandEventArgs e)
    {{
        switch (e.CommandName)
        {{
{0}

        }}



    }}</value>
  </data>
  <data name="GetTableForeign" xml:space="preserve">
    <value>SELECT
  CONSTRAINT_CATALOG,
  CONSTRAINT_SCHEMA,
  CONSTRAINT_NAME ,
  TABLE_CATALOG,
  TABLE_SCHEMA,
  TABLE_NAME  as PrimaryTableName,
  COLUMN_NAME as PrimaryColumnName,
  ORDINAL_POSITION,
  POSITION_IN_UNIQUE_CONSTRAINT,
  REFERENCED_TABLE_SCHEMA,
  REFERENCED_TABLE_NAME as ForeignTableName,
  REFERENCED_COLUMN_NAME as ForeignColumnName
FROM information_schema.KEY_COLUMN_USAGE where table_name=?tableName
  and  CONSTRAINT_SCHEMA=?tableSchema  and REFERENCED_COLUMN_NAME is not  null</value>
  </data>
  <data name="GetCreateCommand" xml:space="preserve">
    <value>              case "{0}":
                Redirect("{1}{2});
                break;</value>
  </data>
  <data name="GetBoundField" xml:space="preserve">
    <value>           &lt;WTF:BoundField DataField="{0}" HeaderText="{1}" {2}   {3}  {4}&gt;
            &lt;/WTF:BoundField&gt;</value>
  </data>
  <data name="GetRenderPageSql" xml:space="preserve">
    <value>public override void RenderPage()
    {{

        this.CurrentBindData(gdvContent, obj{0}.GetPage);
    }}</value>
  </data>
  <data name="GetItemRedirectState" xml:space="preserve">
    <value>               case "{0}":
                RedirectState("{1}?{3}{2}=" + gdvContent.SelectedRowFirstKey);
                break;</value>
  </data>
  <data name="GetBackCommand" xml:space="preserve">
    <value>              case "{0}":
                Redirect("{1}{2});
                break;</value>
  </data>
  <data name="GetSearchCondition" xml:space="preserve">
    <value>               case "Search":

                SearchCondition();
                break;</value>
  </data>
  <data name="GetConditionT" xml:space="preserve">
    <value>public override Expression&lt;Func&lt;{0}, bool&gt;&gt; Condition
    {{
        get
        {{
            return s=&gt;s.{1}=={1};
        }}
    }}</value>
  </data>
  <data name="GetSortExpression" xml:space="preserve">
    <value>public override string SortExpression
    {
        get
        {
            return "";
        }
    }</value>
  </data>
  <data name="GetEntitys" xml:space="preserve">
    <value>        /// &lt;summary&gt;
        /// 模型变量
        /// &lt;/summary&gt;
        private {0} objCurrentEntities = null;

        //属性

        #region 模型实体
        /// &lt;summary&gt;
        /// 模块
        /// &lt;/summary&gt;
        public {0} CurrentEntities
        {{
            get
            {{
                if (this.objCurrentEntities == null)
                {{
                    this.objCurrentEntities = new {0}(EntitiesHelper.GetConnectionString&lt;{0}&gt;());
                }}



                return this.objCurrentEntities;
            }}
        }}
        #endregion</value>
  </data>
  <data name="GetToEntityValue" xml:space="preserve">
    <value>              if (reader["{0}"] != DBNull.Value)
                        {1}.{3} = Convert.To{2}(reader["{0}"]);</value>
  </data>
  <data name="GetItemRedirect" xml:space="preserve">
    <value>               case "{0}":
                Redirect("{1}?{3}{2}=" + gdvContent.SelectedRowFirstKey);
                break;</value>
  </data>
  <data name="GetQueryText" xml:space="preserve">
    <value>&lt;WTF:QueryTextBox ID="{0}" QueryTitle="{1}" runat="server"&gt;&lt;/WTF:QueryTextBox&gt;</value>
  </data>
  <data name="GetQueryDrop" xml:space="preserve">
    <value>&lt;WTF:QueryDropDownList ID="{0}" QueryTitle="{1}" runat="server"&gt;
    &lt;/WTF:QueryDropDownList&gt;</value>
  </data>
  <data name="GetQueryDate" xml:space="preserve">
    <value>&lt;WTF:QueryTextBox ID="QueryStartDate" QueryTitle="{1}" QueryField="{0}" QueryMethod="GreaterThanOrEqual"
        runat="server" QueryDataType="Date" SkinID="Date" onfocus="new WdatePicker({{dateFmt:'yyyy-MM-dd HH:mm'}})"&gt;&lt;/WTF:QueryTextBox&gt;
    -
    &lt;WTF:QueryTextBox ID="QueryEndDate" QueryField="{0}" QueryMethod="LessThanOrEqual"
        runat="server" QueryDataType="Date" SkinID="Date" onfocus="new WdatePicker({{dateFmt:'yyyy-MM-dd HH:mm'}})"&gt;&lt;/WTF:QueryTextBox&gt;</value>
  </data>
  <data name="GetRowRedirectState" xml:space="preserve">
    <value>              case "{0}":
                RedirectState("{1}?{3}{2}=" + e.CommandArgument.ToString());
                break;</value>
  </data>
  <data name="GetTableColumns" xml:space="preserve">
    <value>SELECT  
TABLE_NAME as TableName,
COLUMN_NAME AS FieldName ,
DATA_TYPE   AS DataType, CASE WHEN  POSITION( 'unsigned'IN COLUMN_TYPE)&gt;0
 THEN 1 ELSE 0 END AS IsUnsigned,
COLUMN_COMMENT as Description,
CASE WHEN IS_NULLABLE ='YES' 
 THEN 1 ELSE 0 END   as IsNullable,
CASE WHEN COLUMN_KEY ='PRI' 
 THEN 1 ELSE 0 END   as IsKey,

 
 CASE WHEN EXTRA ='auto_increment'
  
 THEN 1 ELSE 0 END AS Identity,

CASE WHEN CHARACTER_MAXIMUM_LENGTH is not NULL
  
 THEN CHARACTER_MAXIMUM_LENGTH
 
 ELSE 0 END AS Length

  FROM INFORMATION_SCHEMA.COLUMNS   where table_name=?tableName  and TABLE_SCHEMA=?SchemaName</value>
  </data>
  <data name="GetDeleteTEmpty" xml:space="preserve">
    <value>       /// &lt;summary&gt;
        ///删除{0}
        /// &lt;/summary&gt;
        /// &lt;param name="primaryKey"&gt;主键值&lt;/param&gt;
        public void Delete{1}ByKey(string primaryKey)
        {{
       未检查到主键无所生成请手动填写
        }}</value>
  </data>
  <data name="GetBizRule" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using WTF.Logging;
using WTF.Framework;
using WTF.Business;
using {0}.DataAccess;
using {0}.DataEntity;



namespace {0}.Business
{{
    /// &lt;summary&gt;
    /// {4}{1}业务逻辑层
    /// &lt;/summary&gt;
    public partial class Biz{1} : BizBase&lt;Da{1}, {1}, {3}&gt;
    {{

        #region 变量

        /// &lt;summary&gt;
        /// 数据访问层变量
        /// &lt;/summary&gt;
        Da{1} objDa{1} = null;

        /// &lt;summary&gt;
        /// 数据访问层
        /// &lt;/summary&gt;
        public override Da{1} Dal
        {{
            get {{ return objDa{1};  }}
         }}

		 

        #endregion

        #region 构造函数

        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        public Biz{1}()
            : this("")
        {{

         }}

        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        /// &lt;param name="dataObjectParam"&gt;表扩展名，如：us、jp&lt;/param&gt;
        public Biz{1}(string dataObjectParam)
            : this("{7}", dataObjectParam)
        {{

         }}

        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        /// &lt;param name="connectionKeyOrConnectionString"&gt;&lt;/param&gt;
        /// &lt;param name="dataObjectParam"&gt;表扩展名，如：us、jp&lt;/param&gt;
        public Biz{1}(string connectionKeyOrConnectionString, string dataObjectParam)
        {{
            objDa{1} = new Da{1}(connectionKeyOrConnectionString, dataObjectParam);
            objDa{1}.Log.LogModuleType = "{5}";
         }}

        #endregion

        #region 新增

        /// &lt;summary&gt;
        /// 新增{4}
        /// &lt;/summary&gt;
        /// &lt;param name="{2}"&gt;{1}&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public {3} Add({1} {2})
        {{
{6}
            return Dal.Add({2});
         }}


        #endregion

        #region 修改

        /// &lt;summary&gt;
        /// 修改{4}
        /// &lt;/summary&gt;
        /// &lt;param name="{2}"&gt;{1}&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int Update({1} {2})
        {{
{6}
            return Dal.Update({2});
        }}


        #endregion


     }}
 }}</value>
  </data>
  <data name="GetTemplateField" xml:space="preserve">
    <value>&lt;WTF:TemplateField HeaderText="{1}"  {2}   {3}  {4}&gt;
                &lt;ItemTemplate&gt;
                    &lt;%#  Eval("{0}")%&gt;
                &lt;/ItemTemplate&gt;
            &lt;/WTF:TemplateField&gt;</value>
  </data>
  <data name="GetUpdateObject" xml:space="preserve">
    <value>        /// &lt;summary&gt;
        /// 更新{2}
        /// &lt;/summary&gt;
        /// &lt;param name="obj{0}"&gt;对象{2}&lt;/param&gt;
        public void Update{1}({0} obj{0})
        {{

{3}
            CurrentEntities.SaveChanges();
        }}</value>
  </data>
  <data name="GetCommandRnderPage" xml:space="preserve">
    <value>               case "{0}":
                {1}
                RenderPage();
                break;</value>
  </data>
  <data name="GetCommand" xml:space="preserve">
    <value>SELECT  
       ModuleName
      ,PlaceType
      ,CommandName
      ,SortIndex
  FROM  Sys_Module  where ParentModuleID='{0}'
   
 and  ModuleShow=1</value>
  </data>
  <data name="GetInsertIdentity" xml:space="preserve">
    <value>            object objValue = null;
            if ({0}.{1} &gt;= 0)
            {{
                sb.Append("{2}");
                objValue = ExecuteScalar(sb.ToString(),param);
                if (objValue == null)
                {{
                    return 0;
                }} else
                {{
                   {0}.{1}  =Convert.To{3}(objValue);
                }}
            }}
            else
            {{
                objValue = ExecuteNonQuery(sb.ToString(),param);
            }}

            return Convert.To{3}(objValue);</value>
  </data>
  <data name="GetDalAccess" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using MySql.Data.MySqlClient;
using WTF.DAL;
using WTF.Framework;
using {0}.DataEntity;
namespace {0}.DataAccess
{{
    /// &lt;summary&gt;
    /// {13}{3}数据层
    /// &lt;/summary&gt;
    public partial class Da{1} : DalBase&lt;{1}, {5}&gt;
    {{

        #region 构造函数

        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        /// &lt;param name="connectionKeyOrConnectionString"&gt;数据库连接串&lt;/param&gt;
        /// &lt;param name="dataObjectParam"&gt;表扩展名，如：us、jp&lt;/param&gt;
        public Da{1}(string connectionKeyOrConnectionString, string dataObjectParam)
            : base("{3}","{14}_vw", "{4}", connectionKeyOrConnectionString)
        {{
            if (!string.IsNullOrWhiteSpace(dataObjectParam))
			 {{
			    _DataObjectParam = dataObjectParam;
                _TableName ="{14}_"+dataObjectParam+"_tb";
				_TableViewName ="{14}_"+dataObjectParam+"_vw";
			 }}
        }}


        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        /// &lt;param name="dataObjectParam"&gt;表扩展名，如：us、jp&lt;/param&gt;
        public Da{1}(string dataObjectParam)
            : this("", dataObjectParam)
        {{

        }}

        /// &lt;summary&gt;
        /// 构造函数
        /// &lt;/summary&gt;
        public Da{1}()
            : this("")
        {{

       }}

        #endregion

        #region 对象转换

        /// &lt;summary&gt;
        /// 获取对象列表
        /// &lt;/summary&gt;
        /// &lt;param name="reader"&gt;reader&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public override IList&lt;{1}&gt; GetList(MySqlDataReader reader)
        {{
            IList&lt;{1}&gt; objList = new List&lt;{1}&gt;();
            try
           {{
                while (reader.Read())
                {{
                    {1} {2} = new {1}();
{6}
                    objList.Add({2});
                }}
           }}
            finally
           {{
                reader.Close();
            }}

            return objList;

        }}


        #endregion
      
       

        #region 新增

        /// &lt;summary&gt;
        /// 新增数据
        /// &lt;/summary&gt;
        /// &lt;param name="{2}"&gt;对象&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public {5} Add({1} {2})
       {{

            
           StringBuilder sb = new StringBuilder();

            sb.Append("INSERT INTO " + _TableName + " ");
            sb.Append("(");
{9}
            sb.Append(")");
            sb.Append(" Values(");
{10}
            sb.Append(");");

{11}

{12}            

           
        }}


        #endregion

       
        #region 更新
        /// &lt;summary&gt;
        /// 更新对象
        /// &lt;/summary&gt;
        /// &lt;param name="{1}"&gt;对象&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int Update({1} {2})
        {{
             StringBuilder sb = new StringBuilder();
            sb.Append("UPDATE " + _TableName + " SET ");
{7}


{8}

            return ExecuteNonQuery(sb.ToString(),param);
             
       }}

        #endregion

    }}
}}</value>
  </data>
  <data name="GetCondition" xml:space="preserve">
    <value>public override string Condition
   {{
        get
         {{
            return "it.{0}={1};
        }}
      }}</value>
  </data>
  <data name="GetDeleteKey" xml:space="preserve">
    <value>        /// &lt;summary&gt;
        ///删除{2}
        /// &lt;/summary&gt;
        /// &lt;param name="primaryKey"&gt;主键值&lt;/param&gt;
        public void Delete{1}ByKey(string primaryKey)
        {{

            CurrentEntities.{0}.DeleteDataPrimaryKey(primaryKey);
        }}</value>
  </data>
  <data name="GetObjectQuery" xml:space="preserve">
    <value>        /// &lt;summary&gt;
        /// {1}
        /// &lt;/summary&gt;
        public ObjectQuery&lt;{0}&gt; {0}
        {{
            get
            {{
                return CurrentEntities.{0};
            }}

        }}</value>
  </data>
  <data name="GetRenderPageT" xml:space="preserve">
    <value>public override void RenderPage()
    {{

        this.CurrentBindData(gdvContent, obj{1}.{0});
    }}</value>
  </data>
  <data name="GetWidth" xml:space="preserve">
    <value>HeaderStyle-Width="{0}" ItemStyle-Width="{0}"</value>
  </data>
  <data name="GetDbSet" xml:space="preserve">
    <value>/// &lt;summary&gt;
        /// {1}
        /// &lt;/summary&gt;
        public DbSet&lt;{0}&gt; {0}
        {{
            get
            {{
                return CurrentEntities.{0};
            }}

        }}</value>
  </data>
  <data name="GetRowRedirect" xml:space="preserve">
    <value>              case "{0}":
                Redirect("{1}?{3}{2}=" + e.CommandArgument.ToString());
                break;</value>
  </data>
  <data name="GetInsertObject" xml:space="preserve">
    <value>         /// &lt;summary&gt;
        ///新增{2}
        /// &lt;/summary&gt;
        /// &lt;param name="obj{0}"&gt;对象{2}&lt;/param&gt;
        public void Insert{1}({0} obj{0})
        {{
{3}
            CurrentEntities.AddTo{0}(obj{0});
            CurrentEntities.SaveChanges();
        }}</value>
  </data>
  <data name="GetInsertDbSet" xml:space="preserve">
    <value>         /// &lt;summary&gt;
        ///新增{2}
        /// &lt;/summary&gt;
        /// &lt;param name="obj{0}"&gt;对象{2}&lt;/param&gt;
        public void Insert{1}({0} obj{0})
        {{
{3}
            CurrentEntities.{0}.Add(obj{0});
            CurrentEntities.SaveChanges();
        }}</value>
  </data>
  <data name="GetDeleteCondition" xml:space="preserve">
    <value>         /// &lt;summary&gt;
        ///删除{2}
        /// &lt;/summary&gt;
        /// &lt;param name="condition"&gt;条件&lt;/param&gt;
        public void Delete{1}(string condition)
        {{
            CurrentEntities.{0}.DeleteData(condition);
        }}</value>
  </data>
  <data name="GetOperateField" xml:space="preserve">
    <value>           &lt;WTF:OperateField DataTextField="{0}" HeaderText="{1}"  {2}   {3}  {4}&gt;
            &lt;/WTF:OperateField&gt;</value>
  </data>
  <data name="GetSummary" xml:space="preserve">
    <value>       /// &lt;summary&gt;
       /// {0}
       /// &lt;/summary&gt;</value>
  </data>
  <data name="GetRowCommand" xml:space="preserve">
    <value>protected override void CurrentContent_RowCommand(object sender, GridViewCommandEventArgs e)
    {{
        switch (e.CommandName)
        {{
{0}
        }}
    }}</value>
  </data>
  <data name="GetJavaDal" xml:space="preserve">
    <value>import com.WTF.core.*;
import com.WTF.dal.*;
public class {0}Dal extends Dal&lt;{0}&gt; {{

	public {0}Dal(String dataObjectParam, String connectionKeyOrConnectionString) {{
		super("{1}", connectionKeyOrConnectionString);
		if (StringHelper.isNoNullOrWhiteSpace(dataObjectParam)) {{

			setTableName("{2}"+dataObjectParam+ "_tb"); 
		}}

	}}
	public {0}Dal(String dataObjectParam) {{
		this(dataObjectParam, "默认连接串值");

	}}
	public {0}Dal() {{
		this("");

	}}
}}</value>
  </data>
</root>